// Pseudocodigo

class Prenda {
	variable precio
	variable estado
	variable tipoPrenda

	method precio()
		return estado.calcularPrecioFinal(precio)
}

interface Estado {
	method calcularPrecioFinal(precio)
}

class Nueva implements Estado{
	method calcularPrecioFinal(precio)
		return precio
}

class Promocion implements Estado{
	variable valorDescuento

	method calcularPrecioFinal(precio)
		return precio - valorDescuento
}

class Liquidacion implements Estado {
	method calcularPrecioFinal(precio)
		return precio * 0.5
}

class ItemVenta {
	variable cantidad
	variable prenda

	method precioTotal()
		return cantidad * prenda.precio()
}

class Venta {
	variable items
	variable fecha
	variable medioPago

	method monto()
		return medioPago.monto(items)

	method esDeFecha(unaFecha)
		return fecha == unaFecha
}

interface MedioPago {
	method monto(items)
}

class Efectivo implements MedioPago {
	method monto(items)
		return items.sum(item -> item.precioTotal())
}

class TarjetaCredito implements MedioPago{
	variable cuotas
	variable coeficienteRecargo

	method monto(items){
		valorPrendas = items.sum(item -> item.precioTotal()) 
		return valorPrendas + (valorPrendas * 0.01) + (cuotas * coeficienteRecargo)
	}
}

class Negocio {
	variable ventas

	method gananciasDelDia(dia)
		return ventas.filter(venta -> venta.esDeFecha(dia))
					 .sum(venta -> venta.monto()
}


// La parte de Ventas tambien podria tener una clase padre Venta que represente la venta en efectivo 
// y una clase hija VentaEnTarjeta a la que se le aplique el recargo. De esa forma, no repetiriamos 
// la logica de calcular el valor de las prendas, pero no quedaria tan claro que una venta tiene un 
// medio de pago.
// Seria mas facil al crear la venta porque quedaria: Venta venta = new VentaEnTarjeta()
// Haciendolo con composicion quedaria por ejemplo: Venta venta = new Venta(new Efectivo())
// en el constructor o en algun lado habria que pasarle cual es el medio de pago a la venta y seria
// un objeto hijo de la interfaz MedioPago.
